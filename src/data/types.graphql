type get_coins_coin_id_events_response_items {
  id: String
  date: String
  date_to: String
  name: String
  description: String
  is_conference: Boolean
  link: String
  proof_image_link: String
}

type get_coins_coin_id_exchanges_response_items {
  id: String
  name: String
  fiats: [String!]
  adjusted_volume_24h_share: Float
}

type get_coins_coin_id_markets_response_items {
  exchange_id: String
  exchange_name: String
  pair: String
  base_currency_id: String
  base_currency_name: String
  quote_currency_id: String
  quote_currency_name: String
  market_url: String
  category: String
  fee_type: String
  outlier: String
  adjusted_volume_24h_share: Float
  quotes: get_coins_coin_id_markets_response_items_quotes
  last_updated: String
}

type get_coins_coin_id_markets_response_items_quotes {
  _KEY: get_coins_coin_id_markets_response_items_quotes__KEY
}

type get_coins_coin_id_markets_response_items_quotes__KEY {
  price: Float
  volume_24h: Float
}

type get_coins_coin_id_ohlcv_historical_response_items {
  """RFC3999 (ISO-8601) format"""
  time_open: String

  """RFC3999 (ISO-8601) format"""
  time_close: String
  open: Float
  high: Float
  low: Float
  close: Float
  volume: Int
  market_cap: Int
}

type get_coins_coin_id_ohlcv_latest__response_items {
  """RFC3999 (ISO-8601) format"""
  time_open: String

  """RFC3999 (ISO-8601) format"""
  time_close: String
  open: Float
  high: Float
  low: Float
  close: Float
  volume: Int
  market_cap: Int
}

type get_coins_coin_id_ohlcv_today__response_items {
  """RFC3999 (ISO-8601) format"""
  time_open: String

  """RFC3999 (ISO-8601) format"""
  time_close: String
  open: Float
  high: Float
  low: Float
  close: Float
  volume: Int
  market_cap: Int
}

type get_coins_coin_id_twitter_response_items {
  """Publish date of the tweet. RFC3999 (ISO-8601) format"""
  date: String

  """Twitter profile user name"""
  user_name: String

  """Twitter profile user image URL"""
  user_image_link: String

  """Tweet content"""
  status: String

  """Flag indicating whether it is a retweet of someone else's tweet"""
  is_retweet: Boolean

  """Number of retweets of this tweet"""
  retweet_count: Int

  """Number of likes of this tweet"""
  like_count: Int

  """Tweet URL"""
  status_link: String

  """Tweet ID"""
  status_id: String
  media_link: String

  """Link to Youtube video shared in this tweet"""
  youtube_link: String
}

type get_coins_response_items {
  """ID of coin on coinpaprika.com"""
  id: String

  """Name of the cryptocurrency"""
  name: String

  """Symbol of the cryptocurrency"""
  symbol: String

  """
  Current ranking of the cryptocurrency. If `is_active` is false the `rank` is 0
  """
  rank: Int

  """Flag indicating if the currency was added within the last 5 days"""
  is_new: Boolean

  """
  Flag indicating if the currency is active, which means that we can calculate the current price and volume
  """
  is_active: Boolean

  """
  Type of the cryptocurrency. Currently supported values are `coin` and `token`
  """
  type: String
}

type get_exchanges_exchange_id_markets_response_items {
  pair: String
  base_currency_id: String
  base_currency_name: String
  quote_currency_id: String
  quote_currency_name: String
  market_url: String
  category: String
  fee_type: String
  outlier: String
  reported_volume_24h_share: Float
  quotes: get_exchanges_exchange_id_markets_response_items_quotes
  last_updated: String
}

type get_exchanges_exchange_id_markets_response_items_quotes {
  _KEY: get_exchanges_exchange_id_markets_response_items_quotes__KEY
}

type get_exchanges_exchange_id_markets_response_items_quotes__KEY {
  price: Float
  volume_24h: Float
}

type get_global_response {
  """
  Total market capitalization - sum of all cryptocurrency market capitalizations in USD
  """
  market_cap_usd: Float

  """Total 24h volume - sum of all cryptocurrency volumes in USD"""
  volume_24h_usd: Float

  """
  Bitcoin market capitalization as a percentage of total market capitalization
  """
  bitcoin_dominance_percentage: Float

  """
  This is number of active cryptocurrencies on our site (active in this case
  means that we have up-to-date price data for a coin). Total number of our
  cryptocurrencies is higher and may be obtained via counting elements in /coins endpoint.
  """
  cryptocurrencies_number: Int

  """
  ATH (All Time High) value of market capitalization - the highest historical value of marketcap
  """
  market_cap_ath_value: Float

  """ATH (All Time High) date of market capitalization"""
  market_cap_ath_date: String

  """
  ATH (All Time High) value of the 24h volume - the highest historical value of 24h volume
  """
  volume_24h_ath_value: Float

  """ATH (All Time High) date of volume 24h"""
  volume_24h_ath_date: String

  """Percentage change in the market capitalization over the last 24h"""
  market_cap_change_24h: Float

  """Percentage change in the volume 24h over the last 24h"""
  volume_24h_change_24h: Float

  """Timestamp of the last data update"""
  last_updated: Int
}

type get_key_info_response {
  """Name of the API plan"""
  plan: String

  """A date when the plan started in RFC3999 (ISO-8601) format"""
  plan_started_at: String

  """
  Status of the plan. There are 3 possible statuses: `active` - the subscription
  is active; `past_due` - the subscription payment failed. If payment is not
  made within 7 days, then the subscription will expire; `inactive` - the
  subscription is inactive.
  """
  plan_status: String

  """API Customer Portal URL"""
  portal_url: String

  """Monthly usage for the API key"""
  usage: get_key_info_response_usage
}

"""Monthly usage for the API key"""
type get_key_info_response_usage {
  """
  `limited plan` if the number of requests is limited in the current plan or
  `unlimited plan` if there is no limit on the number of requests
  """
  message: String

  """Requests made and left stats"""
  current_month: get_key_info_response_usage_current_month
}

"""Requests made and left stats"""
type get_key_info_response_usage_current_month {
  """
  Number of requests made in the current month. If a plan has no limit on the
  number of requests, e.g., `Enterprise` plan, then the value of `requests_made` is -1
  """
  requests_made: Float

  """
  Number of requests left in the  current month. If a plan has no limit on the
  number of requests, e.g., `Enterprise` plan, then the value of `requests_left` is -1
  """
  requests_left: Float
}

type get_price_converter_response {
  base_currency_id: String
  base_currency_name: String
  base_price_last_updated: String
  quote_currency_id: String
  quote_currency_name: String
  quote_price_last_updated: String
  amount: Float
  price: Float
}

type get_search_response {
  currencies: [get_search_response_currencies_items!]
  icos: [get_search_response_icos_items!]
  exchanges: [get_search_response_exchanges_items!]
  people: [get_search_response_people_items!]
  tags: [get_search_response_tags_items!]
}

type get_search_response_currencies_items {
  """ID of coin on coinpaprika.com"""
  id: String

  """Name of the cryptocurrency"""
  name: String

  """Symbol of the cryptocurrency"""
  symbol: String

  """
  Current ranking of the cryptocurrency. If `is_active` is false the `rank` is 0
  """
  rank: Int

  """Flag indicating if the currency was added within the last 5 days"""
  is_new: Boolean

  """
  Flag indicating if the currency is active, which means that we can calculate the current price and volume
  """
  is_active: Boolean

  """
  Type of the cryptocurrency. Currently supported values are `coin` and `token`
  """
  type: String
}

type get_search_response_exchanges_items {
  id: String
  name: String
  rank: Int
}

type get_search_response_icos_items {
  id: String
  name: String
  symbol: String
  is_new: Boolean
}

type get_search_response_people_items {
  id: String
  name: String

  """Number of teams where person is a member"""
  teams_count: Int
}

type get_search_response_tags_items {
  """ID of the tag"""
  id: String

  """Name of the tag"""
  name: String

  """Number of coins with this tag"""
  coin_counter: Int

  """Number of ico projects with this tag"""
  ico_counter: Int
}

type get_tags_response_items {
  """ID of the tag"""
  id: String

  """Name of the tag"""
  name: String

  """Number of coins with this tag"""
  coin_counter: Int

  """Number of ico projects with this tag"""
  ico_counter: Int
  description: String
  type: String
  coins: [String!]
  icos: [String!]
}

type get_tags_tag_id_response {
  """ID of the tag"""
  id: String

  """Name of the tag"""
  name: String

  """Number of coins with this tag"""
  coin_counter: Int

  """Number of ico projects with this tag"""
  ico_counter: Int
  description: String
  type: String
  coins: [String!]
  icos: [String!]
}

"""Tick response. Missing values are returned as empty string"""
type get_ticker_coin_id_response {
  id: String
  name: String
  symbol: String
  rank: String
  price_usd: String
  price_btc: String
  volume_24h_usd: String
  market_cap_usd: String
  circulating_supply: String
  total_supply: String
  max_supply: String
  percent_change_1h: String
  percent_change_24h: String
  percent_change_7d: String
  last_updated: String
}

"""Tick response. Missing values are returned as empty string"""
type get_ticker_response_items {
  id: String
  name: String
  symbol: String
  rank: String
  price_usd: String
  price_btc: String
  volume_24h_usd: String
  market_cap_usd: String
  circulating_supply: String
  total_supply: String
  max_supply: String
  percent_change_1h: String
  percent_change_24h: String
  percent_change_7d: String
  last_updated: String
}

"""ID changelog"""
type getChangelogIDs_response_items_items {
  currency_id: String
  old_id: String
  new_id: String

  """RFC3999 (ISO-8601) format"""
  changed_at: String
}

type getCoinById_response {
  """ID of coin on coinpaprika.com"""
  id: String

  """Name of the cryptocurrency"""
  name: String

  """Symbol of the cryptocurrency"""
  symbol: String

  """This field is deprecated. Use `contracts` field instead"""
  parent: String

  """Current coin ranking position on coinpaprika.com"""
  rank: Int

  """Flag indicating if the currency was added within the last 5 days"""
  is_new: Boolean

  """
  Flag indicating if the currency is active, which means that we can calculate the current price and volume
  """
  is_active: Boolean

  """
  Type of the cryptocurrency. Currently supported values are `coin` and `token`
  """
  type: String

  """Logo image URL"""
  logo: String

  """The array of tags to which this coin was assigned on coinpaprika.com"""
  tags: [getCoinById_response_tags_items!]

  """The cryptocurrency founding and/or developing team"""
  team: [getCoinById_response_team_items!]

  """Text description of the cryptocurrency"""
  description: String

  """An important message about current status of the cryptocurrency"""
  message: String

  """Set to true if the cryptocurrency is Open Source project"""
  open_source: Boolean

  """Set to true if the cryptocurrency is supported by any hardware wallet"""
  hardware_wallet: Boolean

  """Launch date of the cryptocurrency"""
  started_at: String

  """
  Development status of the cryptocurrency - if it is a working project, beta version, just an idea, etc.
  """
  development_status: String

  """Cryptocurrency proof type: Proof of Work, Proof of Stake, etc."""
  proof_type: String

  """
  The cryptocurrency organization structure: centralized, decentralized, hierarchical, flat, etc.
  """
  org_structure: String

  """Name of the hash algorithm used by the cryptocurrency"""
  hash_algorithm: String

  """This field is deprecated. Use `contracts` field instead"""
  contract: String

  """This field is deprecated. Use `contracts` field instead"""
  platform: String
  contracts: [getCoinById_response_contracts_items!]
  links: getCoinById_response_links

  """
  Contains all links of the `{coin_id}` coin together with statistics for some
  of them, e.g. number of twitter followers, reddit subscribers, telegram
  members or github repository stars and contributors
  """
  links_extended: [getCoinById_response_links_extended_items!]
  whitepaper: getCoinById_response_whitepaper

  """
  Date of the first available ticker data for the coin. RFC3999 (ISO-8601) format
  """
  first_data_at: String

  """
  Date of the last available ticker data for the coin. RFC3999 (ISO-8601) format
  """
  last_data_at: String
}

type getCoinById_response_contracts_items {
  """The contract identifier, which is usually its address"""
  contract: String!

  """
  ID of the contract platform. For Ethereum contracts it is `eth-ethereum`, for Tron `trx-tron`, etc.
  """
  platform: String!

  """
  Type of the contract. Currently supported values are: `ERC20`, `BEP2`, `TRC10`, `TRC20`, `Stellar Asset`, `Other`
  """
  type: String!
}

type getCoinById_response_links {
  """List of links to blockchain explorers, if any"""
  explorer: [String!]

  """List of links to Facebook pages of the cryptocurrency, if any"""
  facebook: [String!]

  """List of links to Reddit communities and profiles, if any"""
  reddit: [String!]

  """List of links to source code repositories, if any"""
  source_code: [String!]

  """List of the cryptocurrency websites, if any"""
  website: [String!]

  """List of links to Youtube channels of the cryptocurrency, if any"""
  youtube: [String!]

  """List of links to Medium profiles of the cryptocurrency, if any"""
  medium: [String!]
}

type getCoinById_response_links_extended_items {
  """The link URL"""
  url: String!

  """Type of the link: `website`, `reddit`, `source_code`, etc."""
  type: String!

  """
  An object containing the link stats like `subscribers` (for reddit),
  `followers` (for twitter), `members` (for telegram), `stars`, `contributors`
  (for source code)
  """
  stats: JSON
}

type getCoinById_response_tags_items {
  """ID of the tag"""
  id: String

  """Name of the tag"""
  name: String

  """Number of coins with this tag"""
  coin_counter: Int

  """Number of ico projects with this tag"""
  ico_counter: Int
}

type getCoinById_response_team_items {
  id: String
  name: String
  position: String
}

type getCoinById_response_whitepaper {
  """The whitepaper URL"""
  link: String

  """Link to the whitepaper thumbnail"""
  thumbnail: String
}

type getContracts_response_items {
  address: String
  id: String
  type: String
}

type getExchangeByID_response {
  id: String
  name: String
  active: Boolean
  website_status: Boolean
  api_status: Boolean
  description: String
  message: String
  links: getExchangeByID_response_links
  markets_data_fetched: Boolean
  adjusted_rank: Int
  reported_rank: Int
  currencies: Int
  markets: Int
  fiats: [String!]
  quotes: getExchangeByID_response_quotes
  last_updated: String
}

type getExchangeByID_response_links {
  website: [String!]
  twitter: [String!]
}

type getExchangeByID_response_quotes {
  _KEY: getExchangeByID_response_quotes__KEY
}

type getExchangeByID_response_quotes__KEY {
  reported_volume_24h: Float
  adjusted_volume_24h: Float

  """
  7d reported volume. This value is updated once per day at midnight (UTC). For
  example, at 2019-04-11 11:00 AM this value is the exchange volume between
  2019-04-04 00:00:00 UTC and 2019-04-11 00:00:00 UTC
  """
  reported_volume_7d: Float

  """
  7d adjusted volume updated once per day at midnight (UTC). See `reported_volume_7d` description for more details
  """
  adjusted_volume_7d: Float

  """
  30d reported volume. This value is updated once per day at midnight (UTC). For
  example, at 2019-04-11 11:00 AM this value is the exchange volume between
  2019-03-12 00:00:00 UTC and 2019-04-11 00:00:00 UTC
  """
  reported_volume_30d: Float

  """
  30d adjusted volume updated once per day at midnight (UTC). See `reported_volume_30d` description for more details
  """
  adjusted_volume_30d: Float
}

type getExchanges_response_items {
  id: String
  name: String
  active: Boolean
  website_status: Boolean
  api_status: Boolean
  description: String
  message: String
  links: getExchanges_response_items_links
  markets_data_fetched: Boolean
  adjusted_rank: Int
  reported_rank: Int
  currencies: Int
  markets: Int
  fiats: [String!]
  quotes: getExchanges_response_items_quotes
  last_updated: String
}

type getExchanges_response_items_links {
  website: [String!]
  twitter: [String!]
}

type getExchanges_response_items_quotes {
  _KEY: getExchanges_response_items_quotes__KEY
}

type getExchanges_response_items_quotes__KEY {
  reported_volume_24h: Float
  adjusted_volume_24h: Float

  """
  7d reported volume. This value is updated once per day at midnight (UTC). For
  example, at 2019-04-11 11:00 AM this value is the exchange volume between
  2019-04-04 00:00:00 UTC and 2019-04-11 00:00:00 UTC
  """
  reported_volume_7d: Float

  """
  7d adjusted volume updated once per day at midnight (UTC). See `reported_volume_7d` description for more details
  """
  adjusted_volume_7d: Float

  """
  30d reported volume. This value is updated once per day at midnight (UTC). For
  example, at 2019-04-11 11:00 AM this value is the exchange volume between
  2019-03-12 00:00:00 UTC and 2019-04-11 00:00:00 UTC
  """
  reported_volume_30d: Float

  """
  30d adjusted volume updated once per day at midnight (UTC). See `reported_volume_30d` description for more details
  """
  adjusted_volume_30d: Float
}

type getPeopleById_response {
  id: String
  name: String
  description: String

  """Number of teams where person is a member"""
  teams_count: Int
  links: getPeopleById_response_links
  positions: [getPeopleById_response_positions_items!]
}

type getPeopleById_response_links {
  github: [getPeopleById_response_links_github_items!]
  linkedin: [getPeopleById_response_links_linkedin_items!]
  medium: [getPeopleById_response_links_medium_items!]
  twitter: [getPeopleById_response_links_twitter_items!]
  additional: [getPeopleById_response_links_additional_items!]
}

type getPeopleById_response_links_additional_items {
  url: String
  followers: Int
}

type getPeopleById_response_links_github_items {
  url: String
  followers: Int
}

type getPeopleById_response_links_linkedin_items {
  url: String
  followers: Int
}

type getPeopleById_response_links_medium_items {
  url: String
  followers: Int
}

type getPeopleById_response_links_twitter_items {
  url: String
  followers: Int
}

type getPeopleById_response_positions_items {
  coin_id: String
  coin_name: String
  position: String
}

"""Tick response. Missing values are returned as empty string"""
type getTickers_response_items {
  id: String
  name: String
  symbol: String
  rank: Float
  circulating_supply: Float
  total_supply: Float
  max_supply: Float
  beta_value: Float
  first_data_at: String
  last_updated: String
  quotes: JSON
}

"""Tick response. Missing values are returned as empty string"""
type getTickersById_response {
  id: String
  name: String
  symbol: String
  rank: Float
  circulating_supply: Float
  total_supply: Float
  max_supply: Float
  beta_value: Float
  first_data_at: String
  last_updated: String
  quotes: JSON
}

"""Historical tick response."""
type getTickersHistoricalById_response_items {
  """RFC3999 (ISO-8601) format"""
  timestamp: String
  price: Float
  volume_24h: Int
  market_cap: Int
}

scalar JSON

type Query {
  """
  Returns API key information:
  * Name of the API key plan
  * When the plan started
  * A flag indicating if the plan is active
  * Link to the API user portal
  * Monthly usage
  
  **Available on the following API plans:**
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** Every 1 minute.
  
  """
  get_key_info: get_key_info_response!

  """
  Returns current cryptocurrencies market overview metrics, such as:
  * Global market capitalization
  * Total 24h volume of all cryptocurrencies
  * Number of active cryptocurrencies on coinpaprika.com
  * ATH of 24h volume and market capitalization
  * and more
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** Every 5 minute.
  
  """
  get_global: get_global_response!

  """
  Returns basic information about cryptocurrencies on coinpaprika.com:
  * identity (`id`, `name`, `symbol`)
  * ranking (`rank`)
  * activity status (`is_active`)
  * type of cryptocurrency (`type`) - `coin` or `token`
  * information whether the currency is new (`is_new`) - true if the currency was added within the last 5 days
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** Every 1 minute.
  
  """
  get_coins: [get_coins_response_items!]!

  """
  Returns detailed descriptive information about a single coin, without price or
  volume data. For price data, check the [/tickers](#operation/getTickers) and
  [/tickers/{coin_id}](#operation/getTickersById) endpoints.
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** Every 1 minute.
  
  """
  getCoinById(coin_id: String!): getCoinById_response!

  """
  Returns the last 50 timeline tweets from the official Twitter profile for a given coin.
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** Every 5 minutes.
  
  """
  get_coins_coin_id_twitter(coin_id: String!): [get_coins_coin_id_twitter_response_items!]!

  """
  Returns events for a given coin.
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** Every 5 minutes.
  
  """
  get_coins_coin_id_events(coin_id: String!): [get_coins_coin_id_events_response_items!]!

  """
  Returns exchanges where a given coin is traded.
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** Every 1 minute.
  
  """
  get_coins_coin_id_exchanges(coin_id: String!): [get_coins_coin_id_exchanges_response_items!]!

  """
  Returns all available markets for a given coin.
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** Every 1 minute.
  
  """
  get_coins_coin_id_markets(coin_id: String!, quotes: String): [get_coins_coin_id_markets_response_items!]!

  """
  Returns Open/High/Low/Close values with volume and market capitalization for the last full day.
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** Every 1 day.
  
  """
  get_coins_coin_id_ohlcv_latest_(coin_id: String!, quote: String): [get_coins_coin_id_ohlcv_latest__response_items!]!

  """
  Returns Open/High/Low/Close values with volume and market capitalization for
  any date range. If the `end` date is the current day, data can change with
  every request until actual close of the day at 23:59:59"
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Maximum time range of data available to fetch depending on the plan:**
  
  | Plan       | Time range                         |
  |------------|-------------------------------------|
  | Free       | Last 24 hours |
  | Starter    | Last 30 days |
  | Pro        | Last 90 days |
  | Business   | Last 365 days |
  | Enterprise | No limits |
  
  **The default interval of returned data for OHLCV is 24 hours:**
  ```
  [
    {
      "time_open": "2020-01-01T00:00:00Z",
      "time_close": "2020-01-01T23:59:59Z",
      "open": ...,
      "high": ...,
      "low": ...,
      "close": ...,
      "volume": ...,
      "market_cap": ...
    }
    ...
  ]
  ```
  
  **However, depending on your API plan, you can set a smaller interval by using the query parameter `interval`:**
  
  | Plan       | `interval` parameter value          |
  |------------|-------------------------------------|
  | Free       | `24h` |
  | Starter    | `24h` |
  | Pro        | `24h` |
  | Business   | `1h`, `6h`, `12h`, `24h` |
  | Enterprise | `15m`, `30m`, `1h`, `6h`, `12h`, `24h` |
  
  **Update interval:** Every 15 minute.
  
  """
  get_coins_coin_id_ohlcv_historical(coin_id: String!, start: String!, end: String, limit: Int, interval: String, quote: String): [get_coins_coin_id_ohlcv_historical_response_items!]!

  """
  Returns Open/High/Low/Close values with volume and market capitalization for
  the current day. Data can change every each request until actual close of the
  day at 23:59:59.
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** Every 5 minute.
  
  """
  get_coins_coin_id_ohlcv_today_(coin_id: String!, quote: String): [get_coins_coin_id_ohlcv_today__response_items!]!

  """
  Returns information about a person with the specified ID, related to the
  cryptocurrency market. Using this endpoint you can get a description of the
  person, social media links, number of teams she or he is involved in and the
  positions in those teams. 
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** Every 1 hour.
  
  """
  getPeopleById(person_id: String!): getPeopleById_response!

  """
  Returns basic information about cryptocurrencies tags (categories):
  * name
  * description
  * type of tag: `technical` or `functional`
  * number of coins with the tag
  * number of ICOs with the tag
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** Every 1 hour.
  
  """
  get_tags(additional_fields: String): [get_tags_response_items!]!

  """
  Returns information about a given cryptocurrency tag:
  * name
  * description
  * type of tag: `technical` or `functional`
  * number of coins with the tag
  * number of ICOs with the tag
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** Every 1 hour.
  
  """
  get_tags_tag_id(tag_id: String!, additional_fields: String): get_tags_tag_id_response!

  """
  Returns price data of all active cryptocurrencies on coinpaprika.com:
  * identity (`id`, `name`, `symbol`)
  * ranking (`rank`)
  * supplies (`circulating_supply`, `total_supply`, `max_supply`)
  * [beta coefficient](https://www.investopedia.com/terms/b/beta.asp) (`beta_value`)
  * price data in a given currency (price, volumes, market cap, price changes, ath)
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Maximum number of assets returned depending on the selected API plan:**
  
  | Plan       | Assets                         |
  |------------|-------------------------------------|
  | Free       | 2500 |
  | Starter    | No limits |
  | Pro        | No limits |
  | Business   | No limits |
  | Enterprise | No limits |
  
  **Update interval:** 
  - 3 minutes for Starter, Pro, Business, Enterprise plans
  - On average 5 minutes for Free
  
  """
  getTickers(quotes: String): [getTickers_response_items!]!

  """
  Returns price data of a single cryptocurrency on coinpaprika.com:
  * identity (`id`, `name`, `symbol`)
  * ranking (`rank`)
  * supplies (`circulating_supply`, `total_supply`, `max_supply`)
  * [beta coefficient](https://www.investopedia.com/terms/b/beta.asp) (`beta_value`)
  * price data in a given currency (price, volumes, market cap, price changes, ath)
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** 
  - 3 minutes for Starter, Pro, Business, Enterprise plans
  - On average 5 minutes for Free
  
  """
  getTickersById(coin_id: String!, quotes: String): getTickersById_response!

  """
  Returns historical values of `price`, `volume_24h`, `market_cap` for a given cryptocurrency on coinpaprika.com:
  
  **Available history range depending on the selected API plan:**
  
  | Interval | `interval` param values | Free | Starter | Pro | Business | Enterprise |
  |---|---|---|---|---|---|---|
  | Daily | `24h`, `1d`, `7d`, `14d`, `30d`, `90d`, `365d` | last 1 year | last
  5 years | unlimited | unlimited | unlimited |
  | Hourly | `1h`, `2h`, `3h`, `6h`, `12h` | last 1 day | last 30 days | last 90 days | last 365 days | unlimited |
  | 5-minute | `5m`, `10m`, `15m`, `30m`, `45m` | none | last 7 days | last 30 days | last 365 days | unlimited |
  
  **Update interval:** Every 5 minutes.
  
  """
  getTickersHistoricalById(coin_id: String!, start: String!, end: String, limit: Int, quote: String, interval: String): [getTickersHistoricalById_response_items!]!

  """
  Returns basic information about exchanges on coinpaprika.com:
  * identity (`id`, `name`)
  * ranking
  * activity status
  * number of currencies, markets
  * volumes
  * etc.
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** Every 1 minute.
  
  """
  getExchanges(quotes: String): [getExchanges_response_items!]!

  """
  Returns basic information about a given exchange on coinpaprika.com:
  * identity (`id`, `name`)
  * ranking
  * activity status
  * number of currencies, markets
  * volumes
  * etc.
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** Every 1 minute.
  
  """
  getExchangeByID(quotes: String, exchange_id: String!): getExchangeByID_response!

  """
  Returns list of all available markets on a given exchange on coinpaprika.com:
  * base, quote coin names/symbols, market url
  * market type
  * activity and outlier status
  * price and volume
  * etc.
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** Every 1 minute.
  
  """
  get_exchanges_exchange_id_markets(quotes: String, exchange_id: String!): [get_exchanges_exchange_id_markets_response_items!]!

  """
  Returns all available contract platforms on coinpaprika.com.
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** Every 1 minute.
  
  """
  getPlatforms: [String!]!

  """
  Returns all available contracts for a given platform on coinpaprika.com.
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** Every 1 minute.
  
  """
  getContracts(platform_id: String!): [getContracts_response_items!]!

  """
  Returns [ticker](#operation/getTickersById) data for a contract with a given address.
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** Every 5 minute.
  
  """
  getTicker(platform_id: String!, contract_address: String!): JSON!

  """
  Returns [historical ticks](#operation/getTickersHistoricalById) for a contract with a given address.
  
  **Check [historical ticks endpoint
  documentation](#operation/getTickersHistoricalById) to find out about the
  limitations for each API plan.**
  
  **Update interval:** Every 5 minute.
  
  """
  getHistoricalTicker(platform_id: String!, contract_address: String!, start: String!, end: String, limit: Int, quote: String, interval: String): JSON!

  """
  Returns coin id changes made by coinpaprika.com moderators:
  * `currency_id` - current id of a coin
  * `old_id` - old coin id that has been replaced with a new one
  * `new_id` - new coin id that replaced the old one
  * `changed_at` - date of the change
  
  **Available on the following API plans:**
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** Every 1 minute.
  
  """
  getChangelogIDs(page: Float): [[getChangelogIDs_response_items_items!]!]!

  """
  Returns currencies, exchanges, icos, people, tags on coinpaprika.com for a given search query.
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** Every 1 minute.
  
  """
  get_search(q: String!, c: String, modifier: String, limit: Int): get_search_response!

  """
  Converts a set amount of base currency to quote currency.
  
  **Available on the following API plans:**
  - Free
  - Starter
  - Pro
  - Business
  - Enterprise
  
  **Update interval:** Every 1 minute.
  
  """
  get_price_converter(base_currency_id: String!, quote_currency_id: String!, amount: Int): get_price_converter_response!
  get_ticker: [get_ticker_response_items!]!
  get_ticker_coin_id(coin_id: String!): get_ticker_coin_id_response!
}

